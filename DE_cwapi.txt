<script class="kaggle-component" nonce="rpntyB4uBi/PFssk80Xwxw==">
 var Kaggle=window. Kaggle||{};Kaggle. State=Kaggle. State||[];Kaggle. State. push({"title":"Public API","subtitle":"Create Datasets, Notebooks, and connect with Kaggle","imageUrl":"","mimeType":"text/html","pageContent":"hr width=100% align=left! --Getting Started: Installation  Authentication--h3 id=getting-started-installation--authenticationGetting Started: Installation  Authentication/h3pThe easiest way to interact with Kaggles public API is via our command-line tool (CLI) implemented in Python.  This section covers installation of the kaggle package and authentication. /p    h4 id=installationInstallation/h4    pEnsure you have Python and the package manager pip installed.  Run the following command to access the Kaggle API using the command line: codepip install kaggle/code (You may need to do pip install --user kaggle on Mac/Linux.  This is recommended if problems come up during the installation process. ) Follow the authentication steps below and youll be able to use the codekaggle/code CLI tool. /p    pIf you run into a kaggle: command not found error, ensure that your python binaries are on your path.  You can see where kaggle is installed by doing pip uninstall kaggle and seeing where the binary is.  For a local user install on Linux, the default location is ~/. local/bin.  On Windows, the default location is $PYTHON_HOME/Scripts. /p    h4 id=authenticationAuthentication/h4    pIn order to use the a href= public API/a, you must first authenticate using an API token.  Go to the Account tab of your a href= profile/a and select Create New Token.  This will trigger the download of kaggle. json, a file containing your API credentials. /p    pIf you are using the Kaggle CLI tool, the tool will look for this token at ~/. kaggle/kaggle. json on Linux, OSX, and other UNIX-based operating systems, and at C:\\Users\\lt;Windows-usernamegt;\\. kaggle\\kaggle. json on Windows.  If the token is not there, an error will be raised.  Hence, once youve downloaded the token, you should move it from your Downloads folder to this folder. /p    pIf you are using the Kaggle API directly, where you keep the token doesnt matter, so long as you are able to provide your credentials at runtime. /phr width=100% align=left! --Interacting with Competitions--h3 id=interacting-with-competitionsInteracting with Competitions/h3pThe Kaggle API and CLI tool provide easy ways to interact with Competitions on Kaggle.  The commands available can make participating in competitions a seamless part of your model building workflow. /ppIf you havent installed the package needed to use the command line tool or generated an API token, check out the getting started steps first. /ppJust like participating in a Competition normally through the user interface, you must read and accept the rules in order to download data or make submissions.  You cannot accept Competition rules via the API.  You must do this by visiting the Kaggle website and accepting the rules there. /ppSome of the commands for interacting with Competitions via CLI include:/pul\tli\t\tpcodekaggle competitions list/code: list the currently active competitions/p\t/li\tli\t\tpcodekaggle competitions download -c [COMPETITION]/code: download files associated with a competition/p\t/li\tli\t\tpcodekaggle competitions submit -c [COMPETITION] -f [FILE] -m [MESSAGE]/code: make a competition submission/p\t/li/ulpView all available commands on the a href= documentation on GitHub/a and keep up-to-date with the latest features and bug fixes in the a href= explore additional CLI arguments, remember that you can always append code-h/code after any call to see the help menu for that command. /p    h4 id=submitting-to-a-competitionSubmitting to a Competition/h4    pAssuming that you have already accepted the terms of a Competition (this can only be done through the website, and not through the CLI), you may use the Kaggle CLI to submit predictions to the Competition and have them scored.  To do so, run the command codekaggle competitions submit -c [COMPETITION NAME] -f [FILE PATH]. /code/p    pYou can list all previous submission to a Competition you have entered using the command codekaggle competitions submissions -c [COMPETITION NAME]/code. /p    pTo explore some further CLI arguments, remember that you can always append code-h/code after any call to see the help menu for that command. /phr width=100% align=left! --Interacting with Datasets--h3 id=interacting-with-datasetsInteracting with Datasets/h3pThe Kaggle API and CLI tool provide easy ways to interact with Datasets on Kaggle.  The commands available can make searching for and downloading Kaggle Datasets a seamless part of your data science workflow. /ppIf you havent installed the Kaggle Python package needed to use the command line tool or generated an API token, check out the getting started steps first. /ppSome of the commands for interacting with Datasets via CLI include:/pul\tli\t\tpcodekaggle datasets list -s [KEYWORD]/code: list datasets matching a search term/p\t/li\tli\t\tpcodekaggle datasets download -d [DATASET]/code: download files associated with a dataset/p\t/li/ulpIf you are creating or updating a dataset on Kaggle, you can also use the API to make maintenance convenient or even programmatic.  View all available commands on the a href= documentation on GitHub/a and keep up-to-date with the latest features and bug fixes in the a href= explore additional CLI arguments, remember that you can always append code-h/code after any call to see the help menu for that command. /ppOther than the Kaggle API, there is also a a href= connector on DataStudio! /a You can select Kaggle Datasets as a data source to import directly into DataStudio.  Work in DataStudio to easily create beautiful and effective dashboards on Kaggle Datasets! /p    h4 id=creating-and-maintaining-datasetsCreating and Maintaining Datasets/h4    pThe Kaggle API can be used to to create new Datasets and Dataset versions on Kaggle from the comfort of the command-line.  This can make sharing data and projects on Kaggle a simple part of your workflow.  You can even use the API plus a tool like crontab to schedule programmatic updates of your Datasets to keep them well maintained. /p    pIf you havent installed the Kaggle Python package needed to use the command line tool or generated an API token, check out the getting started steps first. /p    h4 id=create-a-new-datasetCreate a New Dataset/h4    pHere are the steps you can follow to create a new dataset on Kaggle:/p    ul    \tli    \t\tpCreate a folder containing the files you want to upload/p    \t/li    \tli    \t\tpRun codekaggle datasets init -p /path/to/dataset/code to a href= a metadata file/a/p    \t/li    \tli    \t\tpAdd your datasets metadata to the generated file, codedatapackage. json/code/p    \t/li    \tli    \t\tpRun codekaggle datasets create -p /path/to/dataset/code to create the dataset/p    \t/li    /ulpYour dataset will be private by default.  You can also add a code-u/code flag to make it public when you create it, or navigate to Settings gt; Sharing from your datasets page to make it public or share with collaborators. /p    h4 id=create-a-new-dataset-versionCreate a New Dataset Version/h4    pIf youd like to upload a new version of an existing dataset, follow these steps:/p    ul    \tli    \t\tpRun codekaggle datasets init -p /path/to/dataset/code to a href= a metadata file/a (if you dont already have one)/p    \t/li    \tli    \t\tpMake sure the codeid/code field in codedataset-metadata. json/code (or codedatapackage. json/code) points to your dataset/p    \t/li    \tli    \t\tpRun codekaggle datasets version -p /path/to/dataset -m Your message here/code/p    \t/li    /ul    pThese instructions are the basic commands required to get started with creating and updating Datasets on Kaggle.  You can find out more details from the official documentation on GitHub:/p    ul    \tli    \t\tpa href= metadata/a/p    \t/li    \tli    \t\tpa href= a Dataset/a/p    \t/li    \tli    \t\tpa href= a Dataset/a/p    \t/li    /ul    h4 id=working-with-dataset-metadataWorking with Dataset Metadata/h4    pIf you want a faster way to complete the required codedataset-metadata. json/code file (for example, if you want to add column-level descriptions for many tabular data files), we recommend using a href= Datas Data Package Creator/a.  Simply upload the codedataset-metadata. json/code file that youve initialized for your dataset, fill out metadata in the user interface, and download the result. /p    pTo explore some further CLI arguments, remember that you can always append code-h/code after any call to see the help menu for that command. /phr width=100% align=left! --Interacting with Notebooks--h3 id=interacting-with-notebooksInteracting with Notebooks/h3pThe Kaggle API and CLI tool provide easy ways to interact with Notebooks on Kaggle.  The commands available enable both searching for and downloading published Notebooks and their metadata as well as workflows for creating and running Notebooks using computational resources on Kaggle. /ppIf you havent installed the Kaggle Python package needed to use the command line tool or generated an API token, check out the getting started steps first. /ppSome of the commands for interacting with Notebooks via CLI include:/pul\tli\t\tpcodekaggle kernels list -s [KEYWORD]/code: list Notebooks matching a search term/p\t/li\tli\t\tpcodekaggle kernels push -k [KERNEL] -p /path/to/folder /code: create and run a Notebook on Kaggle/p\t/li\tli\t\tpcodekaggle kernels pull [KERNEL] -p /path/to/download -m/code: download code files and metadata associated with a Notebook/p\t/li/ulpIf you are creating a new Notebook or running a new version of an existing Notebook on Kaggle, youcan also use the API to make this workflow convenient or even programmatic.  View all available commands on the a href= documentation on GitHub/a and keep up-to-date with the latest features and bug fixes in the a href= explore additional CLI arguments, remember that you can always append code-h/code after any call to see the help menu for that command. /p    h4 id=creating-and-running-a-new-notebookCreating and Running a New Notebook/h4    pThe Kaggle API can be used to to create new Notebooks and Notebook versions on Kaggle from the comfort of the command-line.  This can make executing and sharing code on Kaggle a simple part of your workflow. /p    pIf you havent installed the Kaggle Python package needed to use the command line tool or generated an API token, check out the getting started steps first. /p    pHere are the steps you can follow to create and run a new Notebook on Kaggle:/p    ul    \tli    \t\tpCreate a local folder containing the code files you want to upload (e. g. , your Python or R notebooks, scripts, or RMarkdown files)/p    \t/li    \tli    \t\tpRun codekaggle kernels init -p /path/to/folder/code to a href= a metadata file/a/p    \t/li    \tli    \t\tpAdd your Notebooks metadata to the generated file, codekernel-metadata. json/code; As you add your title and slug, please be aware that Notebook titles and slugs are linked to each other.  A Notebook slug is always the title lowercased with dashes (-) replacing spaces and removing special characters. /p    \t/li    \tli    \t\tpRun codekaggle kernels push -p /path/to/folder/code to create and run the Notebook on Kaggle/p    \t/li    /ulpYour Notebook will be private by default unless you set it to public in the metadata file.  You can also navigate to Options gt; Sharing from your published Notebooks page to make it public or share with collaborators. /p    h4 id=creating-and-running-a-new-notebook-versionCreating and Running a New Notebook Version/h4    pIf youd like to create and run a new version of an existing Notebook, follow these steps:/p    ul    \tli    \t\tpRun codekaggle kernels pull [KERNEL] -p /path/to/download -m/code to download your Notebooks most recent code and a href= files (if you your local copies arent current)/p    \t/li    \tli    \t\tpMake sure the codeid/code field in codekernel-metadata. json/code points to your Notebook; you no longer need to include the codetitle/code field which is optional for Notebook versions unless you want to rename your Notebook (make sure to update the codeid/code field in your next push AFTER the rename is complete)/p    \t/li    \tli    \t\tpRun codekaggle kernels push -p /path/to/folder/code/p    \t/li    /ul    pThese instructions are the basic commands required to get started with creating, running, and updating Notebooks on Kaggle.  You can find out more details from the official documentation on GitHub:/p    ul    \tli    \t\tpa href= metadata/a/p    \t/li    \tli    \t\tpa href= a Notebook/a/p    \t/li    \tli    \t\tpa href= a Notebook/a/p    \t/li    \tli    \t\tpa href= a Notebooks output/a/p    \t/li    /ul","id":33660,"isPublished":true,"url":"docs/api","isDocPage":true,"allowUnsanitizedHtml":true});performance && performance. mark && performance. mark("CmsPageContainer. componentCouldBootstrap");
</script>
